// The main game area:
var container = document.getElementById("container");

// Starting direction of Snake [39 == key code of right arrow key]
var dir = 39;
// A temporary variable to store direction during direction change
var tempDir;

// A variable to hold random value [used to determine position of food]
var ran = 0;

// The counter variable to hold the current points
var pcount = 0;
// A html holder to display the current points [pcount]
var points = document.getElementById("printpoint");

// The counter variable to hold the current distance travelled
var distance = 0;
// A html holder to display the current distance [distance]
var Distance = document.getElementById("distance");

// The list of small divs (pixels) of the the gamebox generated by the boxes() function
var gameBoxes = document.getElementsByClassName("box");

// A temporary variable to contain the latest box to which the snake has moved
var boxWithSnake;

// Head position of the snake
var head = 5000;
// Tail position of the snake
var tail = 5000;

// Array of points to between head and tail (body of the snake)
var box_array = new Array();

var check1, check2;
var i = 1;
var rtime = 1000;

// The Function to create the game board
var boxes = function() {
  var x = "";
  for (var i = 1; i <= 10000; ++i) {
    x = x + '<div class="box" id="b' + i + ' " ></div>';
  }
  container.innerHTML = x;
  boxWithSnake = gameBoxes[1];
};

boxes();

// The function to determine the next position of food
// And to remove the food from current position
var point = function() {
  gameBoxes[ran].classList.remove("point");
  ran = Math.random();
  ran = Math.floor(ran * 10000);
  gameBoxes[ran].classList.add("point");
};

point();

// The function that kills the snake if it bites itself!
var kill = function() {
  if (boxWithSnake.classList.contains("boxed")) {
    if (
      !alert(
        "You have scored " + pcount + " and travelled " + distance + " blocks"
      )
    )
      window.location.reload();
  }
};

// The function that moves the snake according to the current direction
// Note: Should be called repeatedly [setInterval()]
var mov = function() {
  switch (dir) {
    case 37:
      if (head == tail) {
        --head;

        check1 = head % 100;
        check2 = tail % 100;
        if ((check1 == 99 && check2 == 00) || head < 0) {
          head = head + 100;
        }

        boxWithSnake = gameBoxes[head];
        kill();
      }
      boxWithSnake.classList.add("boxed");
      tail = head;
      break;
    case 38:
      if (head == tail) {
        head = head - 100;
        if (head < 0) head = head + 10000;
        boxWithSnake = gameBoxes[head];
        kill();
      }
      boxWithSnake.classList.add("boxed");
      tail = head;
      break;
    case 39:
      if (head == tail) {
        ++head;

        check1 = head % 100;
        check2 = tail % 100;
        if (check1 == 00 && check2 == 99) {
          head = head - 100;
        }

        boxWithSnake = gameBoxes[head];
        kill();
      }
      boxWithSnake.classList.add("boxed");
      tail = head;
      break;
    case 40:
      if (head == tail) {
        head = head + 100;
        if (head > 9999) head = head - 10000;
        boxWithSnake = gameBoxes[head];
        kill();
      }
      boxWithSnake.classList.add("boxed");
      tail = head;
      break;
    default:
      break;
  }

  distance++;
  box_array[distance] = boxWithSnake;
  Distance.innerHTML = distance;

  setTimeout(function() {
    box_array[i].className = "box";
    i++;
  }, rtime);

  if (tail == ran) {
    rtime += 50;
    pcount++;
    points.innerHTML = pcount;
    point();
  }
};

// Move the snake by calling [mov] repeatedly
interval = setInterval(mov, 50);

// Function to change the direction of the snake
var direction = function(e) {
  tempDir = e["keyCode"];
  switch (tempDir) {
    case 37:
      if (dir != 39) dir = tempDir;
      break;
    case 38:
      if (dir != 40) dir = tempDir;
      break;
    case 39:
      if (dir != 37) dir = tempDir;
      break;
    case 40:
      if (dir != 38) dir = tempDir;
      break;
    default:
      break;
  }
};

// Call the interval to begin the game automatically on load
interval;

// Add event listener to keyboard
addEventListener("keydown", direction);
